import base64
import zlib
import marshal
import sys
encoded_bytecode = ''

try:

    compressed_bytecode = base64.b64decode(encoded_bytecode)


    bytecode = zlib.decompress(compressed_bytecode)


    code_obj = marshal.loads(bytecode)

    exec(code_obj, {'__name__': '__main__'})

except Exception as e:
    print(f"Kodlanmış betiği çalıştırırken bir hata oluştu: {e}")